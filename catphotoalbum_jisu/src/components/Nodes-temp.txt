this.onClick = onClick;
  this.onBackClick = onBackClick;

  this.render = () => {
    if (this.state.nodes.length) {
      const nodesTemplate = this.state.nodes
        .map((node) => {
          const iconPath =
            node.type === "FILE"
              ? "./assets/file.png"
              : "./assets/directory.png";
          return `
      <li class="Node" data-node-id="${node.id}">
        <img src="${iconPath}" />
        <div>${node.name}</div>
      </li>
      `;
        })
        .join("");
      this.$target.innerHTML = !this.state.isRoot
        ? `
        <div class="Node">
          <img src="./assets/prev.png" />
        </div>
      `
        : nodesTemplate;
    }
    //렌더링 된 이후, 모든 클릭가능한 요소에 이벤트 추가
    // this.$target.querySelectorAll(".Node").forEach(($node) => {
    //   $node.addEventListener("click", (e) => {
    //     //dataset을 통해 [data-]로 시작하는 attribute를 꺼내 올 수 있음
    //     const { nodeId } = e.target.dataset;

    //     if (!nodeId) {
    //       this.onBackClick();
    //     }

    //     const selectedNode = this.state.nodes.find(
    //       (node) => node.id === nodeId
    //     );
    //     if (selectedNode) {
    //       this.onClick(selectedNode);
    //     }
    //   });
    // });

    //closest을 이용한 이벤트 최적화. 현재 클릭한 요소와 제일 인접한 요소를 가져옴
    this.$target.addEventListener("click", (e) => {
      const $node = e.target.closest(".Node");
      if ($node) {
        this.onBackClick();
        return;
      }

      const selectedNode = this.state.nodes.find((node) => node.id === nodeId);
      if (selectedNode) {
        this.onClick(selectedNode);
        return;
      }
    });

    //이벤트 요소 추가 후 재 랜더링
    this.render();